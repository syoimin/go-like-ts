# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix (if needed)
        run: npm audit fix --dry-run

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build, security-audit]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full validation pipeline
        run: npm run validate

      - name: Comment PR with quality metrics
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');

            // Get test coverage
            const coverage = execSync('npm run test:coverage -- --silent', { encoding: 'utf8' });

            // Get lint results
            const lintResults = execSync('npm run lint -- --format=json', { encoding: 'utf8' });

            const comment = `
            ## ðŸš€ Quality Gate Results

            âœ… All checks passed!

            ### Test Coverage
            \`\`\`
            ${coverage.split('\n').slice(-10).join('\n')}
            \`\`\`

            ### Code Quality
            - âœ… TypeScript compilation: **Passed**
            - âœ… ESLint checks: **Passed** 
            - âœ… Prettier formatting: **Passed**
            - âœ… Security audit: **Passed**
            - âœ… Go-like patterns enforced: **Passed**
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

---
# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full validation
        run: npm run validate

      - name: Build for production
        run: npm run build

      - name: Create release package
        run: |
          mkdir release
          cp -r dist release/
          cp package.json release/
          cp README.md release/
          tar -czf go-like-typescript-${{ github.ref_name }}.tar.gz release/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Go-like TypeScript Release ${{ github.ref_name }}

            ### Features
            - âœ… Strict TypeScript configuration
            - âœ… Go-like error handling patterns
            - âœ… Explicit type conversion utilities
            - âœ… Comprehensive ESLint rules
            - âœ… Custom rules for Go-like patterns

            ### Quality Metrics
            - Test Coverage: 80%+
            - Type Safety: 100%
            - Code Quality: A+

          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./go-like-typescript-${{ github.ref_name }}.tar.gz
          asset_name: go-like-typescript-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
